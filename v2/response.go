package jsonrpc

import (
	"encoding/json"
	"fmt"
)

// Error codes generated by a JSONRPC Server
const (
	CodeParseError        int = -32700
	CodeInvalidRequest    int = -32600
	CodeMethodNotFound    int = -32601
	CodeInvalidParameters int = -32602
	CodeInternalError     int = -32603
	CodeMiscError         int = -32001
)

// Error will return any errors in the JSONRPC format.
type Error struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

// Error fufils the error interface.
func (err *Error) Error() string {
	return fmt.Sprintf("jsonrpc: %s (%d)", err.Message, err.Code)
}

// Response return the results of the method call to the client in the JSONRPC
// format.
//
// It's fine for ID, Result, and Error to all be nil. For ID in particular, if
// the Call specified an ID then the Response must include the original ID.
type Response struct {
	Version string      `json:"jsonrpc"`
	ID      interface{} `json:"id"`
	Result  interface{} `json:"result,omitempty"`
	Error   *Error      `json:"error,omitempty"`
}

// NewResponse creates a blank response for a specific call
func NewResponse(call *Call) *Response {
	resp := &Response{
		Version: call.Version,
		ID:      call.ID,
	}
	return resp
}

type clientResponse struct {
	Version string          `json:"jsonrpc"`
	ID      interface{}     `json:"id"`
	Result  json.RawMessage `json:"result,omitempty"`
	Error   *Error          `json:"error,omitempty"`
}
